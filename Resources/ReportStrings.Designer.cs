//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContextWeaver.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ReportStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ReportStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ContextWeaver.Resources.ReportStrings", typeof(ReportStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file is a merged representation of the codebase for &apos;{0}&apos;, combined into a single document by ContextWeaver..
        /// </summary>
        internal static string AnalysisOf {
            get {
                return ResourceManager.GetString("AnalysisOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory Structure.
        /// </summary>
        internal static string DirectoryStructure {
            get {
                return ResourceManager.GetString("DirectoryStructure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Format.
        /// </summary>
        internal static string FileFormat {
            get {
                return ResourceManager.GetString("FileFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The content is organized as follows: 1. This summary section 2. A &quot;Hotspots&quot; section identifying key files by metrics 3. An &quot;Instability Analysis&quot; section providing architectural insights 4. A directory structure tree with clickable links to each file 5. Multiple file entries, each consisting of: a. A header with the file path (## File: path/to/file) b. The &quot;Repo Map&quot; summary (public API and imports) c. The full contents of the file in a code block.
        /// </summary>
        internal static string FileFormatDescription {
            get {
                return ResourceManager.GetString("FileFormatDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File: {0}.
        /// </summary>
        internal static string FileHeader {
            get {
                return ResourceManager.GetString("FileHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Files.
        /// </summary>
        internal static string Files {
            get {
                return ResourceManager.GetString("Files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Summary.
        /// </summary>
        internal static string FileSummary {
            get {
                return ResourceManager.GetString("FileSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 🔥 Hotspots Analysis.
        /// </summary>
        internal static string HotspotsAnalysisTitle {
            get {
                return ResourceManager.GetString("HotspotsAnalysisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top 5 Files by Number of Imports.
        /// </summary>
        internal static string HotspotsTop5ByImports {
            get {
                return ResourceManager.GetString("HotspotsTop5ByImports", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top 5 Files by Lines of Code (LOC).
        /// </summary>
        internal static string HotspotsTop5ByLOC {
            get {
                return ResourceManager.GetString("HotspotsTop5ByLOC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports:.
        /// </summary>
        internal static string Imports {
            get {
                return ResourceManager.GetString("Imports", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 📊 Instability Analysis.
        /// </summary>
        internal static string InstabilityAnalysisTitle {
            get {
                return ResourceManager.GetString("InstabilityAnalysisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - `Ca` (Afferent): How many other modules depend on this module (point inwards)..
        /// </summary>
        internal static string InstabilityCa {
            get {
                return ResourceManager.GetString("InstabilityCa", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - `Ce` (Efferent): How many other modules this module uses (points outwards)..
        /// </summary>
        internal static string InstabilityCe {
            get {
                return ResourceManager.GetString("InstabilityCe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intermediate Stability.
        /// </summary>
        internal static string InstabilityDescIntermediate {
            get {
                return ResourceManager.GetString("InstabilityDescIntermediate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Very Stable / Core.
        /// </summary>
        internal static string InstabilityDescStable {
            get {
                return ResourceManager.GetString("InstabilityDescStable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Very Unstable / Concrete.
        /// </summary>
        internal static string InstabilityDescUnstable {
            get {
                return ResourceManager.GetString("InstabilityDescUnstable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to `I = Ce / (Ca + Ce)`.
        /// </summary>
        internal static string InstabilityFormula {
            get {
                return ResourceManager.GetString("InstabilityFormula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ideally, stable modules should be abstract, and unstable modules concrete. Avoid highly abstract, unstable modules, or highly concrete, stable modules..
        /// </summary>
        internal static string InstabilityGuideIdeal {
            get {
                return ResourceManager.GetString("InstabilityGuideIdeal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - `I ≈ 0.5`: Intermediate stability..
        /// </summary>
        internal static string InstabilityGuideIntermediate {
            get {
                return ResourceManager.GetString("InstabilityGuideIntermediate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - `I ≈ 0`: Very stable (many depend on it; depends little on others). Often core contracts/interfaces..
        /// </summary>
        internal static string InstabilityGuideStable {
            get {
                return ResourceManager.GetString("InstabilityGuideStable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - `I ≈ 1`: Very unstable (depends on many; few or none depend on it). Often concrete implementations like UI/adapters..
        /// </summary>
        internal static string InstabilityGuideUnstable {
            get {
                return ResourceManager.GetString("InstabilityGuideUnstable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpretation Guide:.
        /// </summary>
        internal static string InstabilityInterpretationGuide {
            get {
                return ResourceManager.GetString("InstabilityInterpretationGuide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This section estimates the Instability (I) metric for each top-level module (folder/project) based on its dependencies (imports)..
        /// </summary>
        internal static string InstabilityIntro {
            get {
                return ResourceManager.GetString("InstabilityIntro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module Instability Overview:.
        /// </summary>
        internal static string InstabilityModuleOverview {
            get {
                return ResourceManager.GetString("InstabilityModuleOverview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to | Module | Ca (Efferent) | Ce (Afferent) | Instability (I) | Description |.
        /// </summary>
        internal static string InstabilityTableHeader {
            get {
                return ResourceManager.GetString("InstabilityTableHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to |---|---|---|---|---|.
        /// </summary>
        internal static string InstabilityTableSeparator {
            get {
                return ResourceManager.GetString("InstabilityTableSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lines of Code (LOC):.
        /// </summary>
        internal static string LinesOfCode {
            get {
                return ResourceManager.GetString("LinesOfCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metrics.
        /// </summary>
        internal static string Metrics {
            get {
                return ResourceManager.GetString("Metrics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Notes.
        /// </summary>
        internal static string Notes {
            get {
                return ResourceManager.GetString("Notes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Some files may have been excluded based on ContextWeaver&apos;s configuration in `.contextweaver.json` or the default `appsettings.json`. - Binary files are not included in this packed representation. - Files are sorted alphabetically by their full path for consistent ordering..
        /// </summary>
        internal static string NotesDescription {
            get {
                return ResourceManager.GetString("NotesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public API:.
        /// </summary>
        internal static string PublicAPI {
            get {
                return ResourceManager.GetString("PublicAPI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Purpose.
        /// </summary>
        internal static string Purpose {
            get {
                return ResourceManager.GetString("Purpose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file contains a packed representation of the repository&apos;s contents. It is designed to be easily consumable by AI systems for analysis, code review, or other automated processes..
        /// </summary>
        internal static string PurposeDescription {
            get {
                return ResourceManager.GetString("PurposeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repo Map: Public API Signatures and Imports Extraction.
        /// </summary>
        internal static string RepoMapTitle {
            get {
                return ResourceManager.GetString("RepoMapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source Code.
        /// </summary>
        internal static string SourceCode {
            get {
                return ResourceManager.GetString("SourceCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage Guidelines.
        /// </summary>
        internal static string UsageGuidelines {
            get {
                return ResourceManager.GetString("UsageGuidelines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - This file should be treated as read-only. Any changes should be made to the original repository files, not this packed version. - When processing this file, use the file path to distinguish between different files in the repository. - Be aware that this file may contain sensitive information. Handle it with the same level of security as you would the original repository..
        /// </summary>
        internal static string UsageGuidelinesDescription {
            get {
                return ResourceManager.GetString("UsageGuidelinesDescription", resourceCulture);
            }
        }
    }
}
